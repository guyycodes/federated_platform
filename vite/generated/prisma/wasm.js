
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  clerkUserId: 'clerkUserId',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hasCustomerAccount: 'hasCustomerAccount'
};

exports.Prisma.PluginScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  name: 'name',
  description: 'description',
  category: 'category',
  templateId: 'templateId',
  template: 'template',
  gitRepo: 'gitRepo',
  pricingModel: 'pricingModel',
  oneTimePrice: 'oneTimePrice',
  subscriptionTier: 'subscriptionTier',
  usagePrice: 'usagePrice',
  whiteLabel: 'whiteLabel',
  isPublished: 'isPublished',
  isActive: 'isActive',
  deploymentStatus: 'deploymentStatus',
  deploymentUrl: 'deploymentUrl',
  apiEndpoint: 'apiEndpoint',
  totalInstalls: 'totalInstalls',
  monthlyActiveUsers: 'monthlyActiveUsers',
  totalRevenue: 'totalRevenue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt'
};

exports.Prisma.PluginPurchaseScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  pluginId: 'pluginId',
  purchaseType: 'purchaseType',
  amount: 'amount',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionStartDate: 'subscriptionStartDate',
  subscriptionEndDate: 'subscriptionEndDate',
  nextBillingDate: 'nextBillingDate',
  isActive: 'isActive',
  apiKey: 'apiKey',
  usageLimit: 'usageLimit',
  usageCount: 'usageCount',
  purchasedAt: 'purchasedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.PluginUsageScalarFieldEnum = {
  id: 'id',
  purchaseId: 'purchaseId',
  pluginId: 'pluginId',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  responseTime: 'responseTime',
  requestSize: 'requestSize',
  responseSize: 'responseSize',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  timestamp: 'timestamp'
};

exports.Prisma.UserAdministratorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  locationId: 'locationId',
  canViewFinancials: 'canViewFinancials',
  canManageStaff: 'canManageStaff',
  canEditAppointments: 'canEditAppointments',
  canViewReports: 'canViewReports',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.TerritoryScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  territoryCode: 'territoryCode',
  territoryName: 'territoryName',
  territoryAddress: 'territoryAddress',
  territoryCity: 'territoryCity',
  territoryState: 'territoryState',
  territoryZipCode: 'territoryZipCode',
  territoryPhone: 'territoryPhone',
  territoryEmail: 'territoryEmail',
  exclusiveRadius: 'exclusiveRadius',
  populationServed: 'populationServed',
  marketPenetration: 'marketPenetration',
  assignedAt: 'assignedAt'
};

exports.Prisma.CSIScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  score: 'score',
  comment: 'comment',
  source: 'source',
  surveyType: 'surveyType',
  customerId: 'customerId',
  recordedAt: 'recordedAt',
  recordedBy: 'recordedBy'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  phone: 'phone',
  email: 'email',
  isActive: 'isActive',
  franchiseId: 'franchiseId',
  ownerId: 'ownerId',
  franchiseFeeRate: 'franchiseFeeRate',
  royaltyRate: 'royaltyRate',
  timezone: 'timezone',
  businessHours: 'businessHours',
  currentCSIAverage: 'currentCSIAverage',
  lastCSIUpdate: 'lastCSIUpdate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TerritoriesAvailableScalarFieldEnum = {
  id: 'id',
  territoryCode: 'territoryCode',
  territoryName: 'territoryName',
  state: 'state',
  city: 'city',
  zipCodes: 'zipCodes',
  county: 'county',
  estimatedPopulation: 'estimatedPopulation',
  averageIncome: 'averageIncome',
  competitorCount: 'competitorCount',
  marketPotential: 'marketPotential',
  franchiseFee: 'franchiseFee',
  minimumInvestment: 'minimumInvestment',
  exclusiveRadius: 'exclusiveRadius',
  isAvailable: 'isAvailable',
  reservedUntil: 'reservedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  role: 'role',
  dogName: 'dogName',
  dogBreed: 'dogBreed',
  dogAge: 'dogAge',
  dogWeight: 'dogWeight',
  allergies: 'allergies',
  preferredGroomer: 'preferredGroomer',
  notes: 'notes',
  squareCustomerId: 'squareCustomerId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FranchiseFeeScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  month: 'month',
  year: 'year',
  serviceRevenue: 'serviceRevenue',
  productRevenue: 'productRevenue',
  subscriptionRevenue: 'subscriptionRevenue',
  totalRevenue: 'totalRevenue',
  franchiseFee: 'franchiseFee',
  royaltyFee: 'royaltyFee',
  totalFees: 'totalFees',
  isPaid: 'isPaid',
  paidAt: 'paidAt',
  dueDate: 'dueDate',
  createdAt: 'createdAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  customerId: 'customerId',
  serviceType: 'serviceType',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  price: 'price',
  notes: 'notes',
  assignedTo: 'assignedTo',
  status: 'status',
  completedAt: 'completedAt',
  squareOrderId: 'squareOrderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  customerId: 'customerId',
  packageType: 'packageType',
  price: 'price',
  billingInterval: 'billingInterval',
  status: 'status',
  startDate: 'startDate',
  nextBillingDate: 'nextBillingDate',
  canceledAt: 'canceledAt',
  squareSubscriptionId: 'squareSubscriptionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  name: 'name',
  description: 'description',
  category: 'category',
  price: 'price',
  cost: 'cost',
  stockQuantity: 'stockQuantity',
  lowStockThreshold: 'lowStockThreshold',
  squareItemId: 'squareItemId',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  customerId: 'customerId',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  status: 'status',
  shippingAddress: 'shippingAddress',
  fulfilledAt: 'fulfilledAt',
  squareOrderId: 'squareOrderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  discount: 'discount',
  quantity: 'quantity',
  price: 'price'
};

exports.Prisma.GithubCallbackScalarFieldEnum = {
  id: 'id',
  callbackId: 'callbackId',
  streamUrl: 'streamUrl',
  streamStatus: 'streamStatus',
  data: 'data',
  pluginId: 'pluginId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  UNSET: 'UNSET',
  USER_ADMIN: 'USER_ADMIN',
  USER: 'USER',
  LOCATION_ADMIN: 'LOCATION_ADMIN',
  CUSTOMER: 'CUSTOMER',
  STAFF: 'STAFF',
  ACCOUNTANT: 'ACCOUNTANT',
  OTHER: 'OTHER'
};

exports.PluginCategory = exports.$Enums.PluginCategory = {
  DEVELOPMENT: 'DEVELOPMENT',
  PRODUCTIVITY: 'PRODUCTIVITY',
  ANALYTICS: 'ANALYTICS',
  LANGUAGE: 'LANGUAGE',
  AI_ML: 'AI_ML',
  AUTOMATION: 'AUTOMATION',
  INTEGRATION: 'INTEGRATION',
  OTHER: 'OTHER'
};

exports.PricingModel = exports.$Enums.PricingModel = {
  FREEMIUM: 'FREEMIUM',
  ONE_TIME: 'ONE_TIME',
  SUBSCRIPTION: 'SUBSCRIPTION',
  USAGE_BASED: 'USAGE_BASED'
};

exports.DeploymentStatus = exports.$Enums.DeploymentStatus = {
  PENDING: 'PENDING',
  DEVELOPMENT: 'DEVELOPMENT',
  STAGING: 'STAGING',
  PRODUCTION: 'PRODUCTION',
  NEW: 'NEW',
  ERROR: 'ERROR'
};

exports.PurchaseType = exports.$Enums.PurchaseType = {
  ONE_TIME: 'ONE_TIME',
  SUBSCRIPTION: 'SUBSCRIPTION'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.CSISource = exports.$Enums.CSISource = {
  CUSTOMER: 'CUSTOMER',
  STAFF: 'STAFF',
  MYSTERY_SHOPPER: 'MYSTERY_SHOPPER',
  ONLINE_REVIEW: 'ONLINE_REVIEW',
  PHONE_SURVEY: 'PHONE_SURVEY',
  OTHER: 'OTHER'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FULFILLED: 'FULFILLED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Plugin: 'Plugin',
  PluginPurchase: 'PluginPurchase',
  PluginUsage: 'PluginUsage',
  UserAdministrator: 'UserAdministrator',
  Territory: 'Territory',
  CSI: 'CSI',
  Location: 'Location',
  TerritoriesAvailable: 'TerritoriesAvailable',
  Customer: 'Customer',
  FranchiseFee: 'FranchiseFee',
  Appointment: 'Appointment',
  Subscription: 'Subscription',
  Product: 'Product',
  Order: 'Order',
  OrderItem: 'OrderItem',
  GithubCallback: 'GithubCallback'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
